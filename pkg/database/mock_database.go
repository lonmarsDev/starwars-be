// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lonmarsDev/starwars-be/pkg/database (interfaces: DatabaseClientAction)
//
// Generated by this command:
//
//	mockgen -destination mock_database.go -package database github.com/lonmarsDev/starwars-be/pkg/database DatabaseClientAction
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	model "github.com/lonmarsDev/starwars-be/pkg/model"
	mongo "go.mongodb.org/mongo-driver/mongo"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseClientAction is a mock of DatabaseClientAction interface.
type MockDatabaseClientAction struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseClientActionMockRecorder
}

// MockDatabaseClientActionMockRecorder is the mock recorder for MockDatabaseClientAction.
type MockDatabaseClientActionMockRecorder struct {
	mock *MockDatabaseClientAction
}

// NewMockDatabaseClientAction creates a new mock instance.
func NewMockDatabaseClientAction(ctrl *gomock.Controller) *MockDatabaseClientAction {
	mock := &MockDatabaseClientAction{ctrl: ctrl}
	mock.recorder = &MockDatabaseClientActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseClientAction) EXPECT() *MockDatabaseClientActionMockRecorder {
	return m.recorder
}

// GetAllSavedCharacter mocks base method.
func (m *MockDatabaseClientAction) GetAllSavedCharacter(arg0 context.Context, arg1 string) ([]model.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSavedCharacter", arg0, arg1)
	ret0, _ := ret[0].([]model.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSavedCharacter indicates an expected call of GetAllSavedCharacter.
func (mr *MockDatabaseClientActionMockRecorder) GetAllSavedCharacter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSavedCharacter", reflect.TypeOf((*MockDatabaseClientAction)(nil).GetAllSavedCharacter), arg0, arg1)
}

// InsertMany mocks base method.
func (m *MockDatabaseClientAction) InsertMany(arg0 context.Context, arg1 string, arg2 []any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockDatabaseClientActionMockRecorder) InsertMany(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockDatabaseClientAction)(nil).InsertMany), arg0, arg1, arg2)
}

// InsertOne mocks base method.
func (m *MockDatabaseClientAction) InsertOne(arg0 context.Context, arg1 string, arg2 any) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockDatabaseClientActionMockRecorder) InsertOne(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockDatabaseClientAction)(nil).InsertOne), arg0, arg1, arg2)
}
