package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/lonmarsDev/starwars-be/graph/model"
	appmodel "github.com/lonmarsDev/starwars-be/pkg/model"
)

// SaveSearch is the resolver for the saveSearch field.
func (r *mutationResolver) SaveSearch(ctx context.Context, input *model.SaveSearchInput) (string, error) {
	var appInput []interface{}
	for _, char := range input.Characters {
		appChar := appmodel.Character{
			Name:    char.Name,
			Film:    char.Cines,
			Vehicle: char.StartShips,
		}
		appInput = append(appInput, appChar)
	}
	return r.Service.SaveSearch(ctx, appInput)
}

// SearchCharacter is the resolver for the searchCharacter field.
func (r *queryResolver) SearchCharacter(ctx context.Context, filter model.CharacterFilterInput) ([]*model.Character, error) {
	resp, err := r.Service.SearchCharacter(ctx, filter.Name)
	if err != nil {
		return nil, err
	}
	switch resp.(type) {
	case *appmodel.SearchResult:
		data := resp.(*appmodel.SearchResult)
		characterList := []*model.Character{}
		for _, v := range data.Character {
			characterList = append(characterList, &model.Character{
				Name:      v.Name,
				Cines:     v.Film,
				StarShips: v.Vehicle,
			})
		}
		return characterList, nil

	default:
		return nil, fmt.Errorf("undefine datatype")
	}
}

// GetSavedCharacter is the resolver for the getSavedCharacter field.
func (r *queryResolver) GetSavedCharacter(ctx context.Context) ([]*model.Character, error) {
	chars, err := r.Service.GetSavedCharacter(ctx)
	if err != nil {
		return nil, err
	}
	characterList := []*model.Character{}
	for _, v := range chars {
		characterList = append(characterList, &model.Character{
			Name:      v.Name,
			Cines:     v.Film,
			StarShips: v.Vehicle,
		})
	}
	return characterList, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) AllCharacter(ctx context.Context, filter *model.CharacterFilterInput) ([]*model.Character, error) {
	panic(fmt.Errorf("not implemented: AllCharacter - allCharacter"))
}
